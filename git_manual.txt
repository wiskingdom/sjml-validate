#출처1: 소셜 코딩으로 이끄는 GitHub 실천 기술
#출처2: 만들면서 배우는 Git GitHub 입문
#출처3: 팀을 위한 Git
#출처4: Pro Git 2/E

##############################
#### git 설치 및 설정
##############################

# git 설치
sudo apt-get install git

# git 이름 메일주소 설정
git config --global user.name "Yeonwoo Kim"
git config --global user.email wiskingdom@gmail.com

# 기본 에디터 설정
git config --global core.editor "vim"
git config --global core.editor "code --wait"

# UI 설정
git config --global color.ui auto

# line ending 설정
git config --global core.autocrlf false

# push default 설정
git config --global push.default simple

#설정 파일
~/.gitconfig

# Display git branch in bash prompt
# insert below in .bashrc

parse_git_branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}
PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00;33m\]$(parse_git_branch)\[\033[00m\] $ '

# c9 style + branch name highlight
PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00;33m\]$(__git_ps1 " (%s)")\[\033[00m\] $ '

##############################
#### git 명령어
##############################

# 기본 액션 명령어
git init
git checkout -f # 스테이지에 올리기 전에 변경사항 되돌리기 
git add 파일이름
git add . # 모든 파일 올리기
git rm -r --cached . # 모든 파일 내리기

git commit
git commit -a
git commit -m 'msg' # 짧은 메시지 달고 커밋하기
git commit --amend # 
git reset --hard 760cf516bd8b05c3f65d132c3808406ece3096ae # 특정 체크섬으로 헤더 옮기기
git rebase -i HEAD~2 # 헤더 커밋과 그 이전 커밋을 합치기

git clean -df # 커밋 하기 전에 변경사항 되돌리기 

# .gitignore 파일
  - 한라인이 하나의 파일명 패턴
  - www.gitignore.io 참고할 것 

# 상태 확인 명령어
git status
git diff
git diff HEAD

git log
git log --pretty=short
git log hello.rb
git log -p
git log -p hello.rb
git log -g
git log --graph
git reflog

git branch
git branch -a


# branch 명령어
git branch develop # 만들기
git branch -d develop #지우기
git checkout develop
git checkout -b develop
git merge develop

# 태그 명령어
git tag 1.0.1
git tag -l # 태그 리스트 확인
git tag 1.0.0 4dd7 # 특정 체크섬에 태그
git tag -a 1.0.0 4dd7 #주석 달린 태그

# 예약어 만들기 명령어
git config --global alias.br branch
git config --global alias.unstage 'reset HAED --'
git config --global alias.visual '!gitk'


##############################
#### github 계정 설정
##############################

# SSH Key 생성
ssh-keygen -t rsa -C "wiskingdom@gmail.com"

# SSH Key 출력
cat ~/.ssh/id_rsa.pub

# SSH agent 등록 확인
eval $(ssh-agent -s)

# SSH 연결 테스트
ssh -T git@github.com
ssh -T git@bitbucket.org

# SSH passphrase 변경
ssh-keygen -p -f ~/.ssh/id_rsa

# SSH 파일 전송
scp <source> <destination>


##############################
#### github 원격
##############################

# 원격 저장소를 로컬 저장소로 가져오기
git clone git@github.com:wiskingdom/w2v_kr.git

# 로컬 저장소를 원격 저장소에 올리기
git remote add origin git@github.com:wiskingdom/w2v_kr.git
git push -u origin master
git push -u origin stable
git push -u origin --all

# 로컬 저장소 원격 연결 확인하기
git remote -v

# 로컬 저장소 원격 연결 끊기
git remote rm origin

# 원격 동기화 명령어
git push
git pull origin develop # pull = fetch + merge

# 원격 저장소 커밋정보 로컬 저장소로 가져오기
git fetch


##############################
#### github 사이트 기능
##############################

# 단축키 목록 보기
  shift + /

# url 이용한 브랜치간 비교
https://github.com/rails/rails/compare/4-0-stable...3-2-stable

# url 이용한 특정 브랜치 변경 내역 비교 day, week, month, year 사용가능
https://github.com/rails/rails/compare/master@{7.day.ago}...master
https://github.com/rails/rails/compare/master@{2017-05-11}...master


# git flow
http://nvie.com/posts/a-successful-git-branching-model/
